{
  
    
        "post0": {
            "title": "Task-based End-to-end Model Learning in Stochastic Optimization",
            "content": "L1: Simple problem-solution description: . The core-problem this paper tries to solve is simple - In an ideal world, the input data distribution matches the ground truth and traditional stochastic optimizers can be employed to solve a given objective function. But, as often is the case in real-world, this is unrealistic. Hence, this paper proposes that the neural networks are added as an intermediary to transforming the input data for sequential quadratic programming solvers to better optimize the given objective function. . L2: Key Details . The proposed algorithm proposes to learn a probabilistic model to produce predictions that when used in a stochastic programming setting, the resulting decisions would be closest to the true distribution | Differentiating through the Stochastic Optimization. This involves computing the Jacobian (of the optimal action wrt the distribution parameters) | Through the implicit function theorem, $ nabla$ KKT optimality conditions gives a set of equations that can be solved using OptNet(Amos et. al) | | L3: Coming soon(proofs, detailed analysis and future work) . Slightly secretive since it’s part of on-going work. .",
            "url": "https://vballoli.github.io/VLog/paper/2022/08/21/task-based-e2e.html",
            "relUrl": "/paper/2022/08/21/task-based-e2e.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lessons from writing Research Code",
            "content": "Having written a good amount of research code for a while now, I was wondering what “good research code” can be construed as. This topic has been discussed heavily with a lot of good blog posts and materials on the internet (some I’ve found: Hongyuan Mei’s blog, Good Research Code Handbook, etc.). Personally, I have a checklist of things that potrays my version of the basic requirements of good research code, in the context of ease of use for other researchers/practioners: . Clear directory, functional structure to all the different contributions of the research code. | Simple docs to guide researchers who want to reproduce/modify certain parts of the pipeline (certainly helpful with docstrings hosted on ReadTheDocs). | Clear README to include instructions to run, cite, and contact-info authors | LICENSE File(specially when working at industrial labs) | Docker images for quick implementation | Code/tutorials to fiddle with and generate the plots of the experiments. | Special note: A good documentation in my observation(see point 2. above) has immensely helped me in navigating relatively new fields of research, particularly in Machine Learning. . But why invest additional time in this ? . The recent trend suggests that most research code goes through multiple phases: . Quick, dirty implementation of the idea in mind | Write scripts to get results | Make code public | Ideally, it should be something like this: . Quick, dirty implementation of the idea in mind. | Tidy code, structured implementation of both the boiler plate, previous work and the core contribution. | Write reproducible scripts and automate most metric collection, results charting and documentation to reduce manual work. | Once code goes public, spending some time in maintaining/addressing user issues. | You’ll notice it’s the second point that differentiates between good and terrible practices - tidying up code at the right time. Given the results of the quick prototype that backed your idea, it’s clear that you’ll be investing a good portion of your time diving deep into all the nuances of this prototype. This means there should be more research and less manual work. What manual work refers to here is often times bad code can result in a lot of manual work of coarsing through csvs, logs, metadata, and other things that shifts the focus from research to running scripts manually. . This means the tools you use(IDE, software, hardware) etc. is something you should be familiar with, mostly from previous experience on other projects. This ensures that: . Not a lot of time is spent on setup (at the start of the project) and publishing (at the end of the project) | Working within a comfortable zone of tools ensures productivity and consistency. | My dev setup is a culmination of mostly research and some non-research tools that is mostly oriented towards working on Windows based local machines with WSL and Linux machines with GPUs. .",
            "url": "https://vballoli.github.io/VLog/setup/code/2022/08/15/research_code.html",
            "relUrl": "/setup/code/2022/08/15/research_code.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Dev Setup",
            "content": "My programming language of choice has mostly been Python lately, with dev both on Linux and Windows (and WSL) - both when I’m working on personal and professional projects. While some of it keeps me awake for quite a long time based on the criticality of the project, it becomes essential that the tools and commands I use are handy, ubiquitous and uniform across my machines. This post showcases some of these and will be updated continuously. . Key Principles . Most of my setup follows some of the key learnings I’ve had here, here. | .bashrc . . Appended to the end of file. Pre-req: pip install gpustat (for gpu machines only) . alias dc=&#39;docker-compose&#39; alias dbuild=&#39;docker build . -t&#39; alias sbc=&#39;source ~/.bashrc&#39; addalias() { echo &quot;alias ${1}&quot; &gt;&gt; $HOME/.bash_aliases } #Source: https://unix.stackexchange.com/a/153978 alias conda-dump=&#39;conda env export --no-builds | grep -v &quot;^prefix: &quot; &gt; environment.yml&#39; #dumps conda environment to environment.yml alias gpuwatch=&#39;gpustat -i 5 -p&#39; alias killgpuproc=&#39;nvidia-smi | grep &quot;python&quot; | awk &quot;{ print $5 }&quot; | xargs -n1 kill -9&#39; alias killcpuproc=&#39;ps aux | grep &quot;python&quot; | awk &quot;{ print $5 }&quot; | xargs -n1 kill -9&#39; alias wandbstop=&#39;wandb disabled&#39; #for debugging . addalias is particularly useful to quickly shift to projects in different folders. . Python . Libraries and Frameworks . Numba - makes things go vroom. | Fastcore - reduces regular boilerplate by quite a lot. | Streamlit - host dashboard to present to multiple people asynchronously and remotely. | Ray - large scale distributed code. | Dask - host cluster on remote machines and send compute to these clusters. fast pandas alternative | Sphinx - build and host documentation | FastAPI - web framework of choice | PostgreSQL - database of choice | sqlalchemy - ORM of choice | Hydra - config management | Wandb/mlflow - experiment tracker personal/professional |",
            "url": "https://vballoli.github.io/VLog/setup/code/2022/07/12/shortcuts.html",
            "relUrl": "/setup/code/2022/07/12/shortcuts.html",
            "date": " • Jul 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vballoli.github.io/VLog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Vaibhav Balloli, Research Fellow at Microsoft Research. I hope you crawl around the web of posts and find something interesting or fun you didn’t know about. If you find this interesting, you can find some of my non-technical writing at vballoli.com or get to know me more by visiting my website .",
          "url": "https://vballoli.github.io/VLog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vballoli.github.io/VLog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}